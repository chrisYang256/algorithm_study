- Linked list는 node들이 링크로 결합이 되면서 list구조를 가지는 data structure입니다.
  -> node 안에는 value, reference, address를 저장하는 공간이 있습니다.
  -> Linked list에 1,2,3,4를 넣는다면 node의 value에 1이 들어가고 이 node의 reference나 address에는 
     다음 node와 연결되는 주소가 저장되고 다음노드는 value에 2가 들어가고 다음 node의 주소가 저장되는 식으로 반복됩니다.
  -> 시작점이 되는 첫번째 node를 head라고 합니다.
     head에서 시작하여 3을 찾고 싶다면 head의 reference나 address를 거쳐 다음 노드로 가는 방식으로 value가 3인 곳으로 반복하여 찾아갑니다.
     따라서 find를 하기 위해서는 O(n)이 필요합니다.
  -> array의 경우 처음부터 찾는 경우 마찬가지로 O(n)이지만 random access를 하는 경우 idx를 통해 O(1)이 되는데
     LL의 경우 idx가 없기 때문에 head를 통해 address를 타고 넘어갈 수밖에 없습니다.
  -> !! 하지만 새로운 node를 insert / delete하는데는 O(1)을 가집니다.
     1,2,3의 노드들 이 있고 2와 3 사이에 5를 넣는 경우 2 노드의 address를 5 노드로 바꿔주는 것으로 끝이고
     2노드를 삭제하는 경우 1노드의 address를 3을 가리키게 한 후 2노드를 지우기 때문입니다.
     이러한 개념을 더 자세히 알기 위해서는 memory와 address라는 개념을 배워야 합니다.(c++의 list)
  -> 하나의 노드가 하나의 노드만을 가리키는 것을 singly linked list라 하고, 두개의 정보를 가지고 있는 경우 doubly linked list라 합니다.
     doubly linked list는 next와 prev를 갖고 각각 앞, 뒤의 노드를 가리키며 마지막 노드를 tail 노드라고 하는데 뒤에서부터 find도 가능합니다.


- LL은 다른 data structure 들의 기초적인 자료구조입니다(Tree, Graph)

- linked list 기초 동작
  -> node의 삭제, 병합, 교차점 찾기, loop 찾기 등
  -> array의 sorting, two point, partitioning처럼 linked list의 이 기초 동작을 완벽이 암기해야 Tree, Graph를 잘 다룰 수 있습니다.