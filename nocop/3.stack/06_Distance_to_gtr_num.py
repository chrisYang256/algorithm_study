"""
<중급>
[39, 20, 70, 36, 30, 60, 80, 1]라는 값이 주어졌을 때 기준숫자보다(오른쪽 방향으로) 큰 수 까지의 거리를 구하는 문제입니다.
39보다 큰 수는 2칸 뒤인 70이므로 2가 됩니다.
따라서 [2, 1, 4, 2, 1, 1, 0, 0]이 리턴됩니다.

brute force 방식으로 두개의 포인터로 하나는 기준값을, 하나는 앞으로 이동하며 보다 큰 수를 찾는 방법이 가장 쉽습니다.
하지만 이경우 2중for문을 사용하므로 O(n²)이 되므로 다른 방법을 찾아봐야 합니다.

포인터를 오른쪽에서 왼쪽으로 이동하는 경우 앞을 살필 필요가 있을까?라는 물음에서 다음과 같은 방법을 사용할 수 있습니다.
스택을 두 개 쌓으며 각각 값과 값의 idx를 저장합니다.
1은 오른쪽 끝에 있으므로 비교할 필요 없이 거리는 0이 되고 스택에는 각각 1/7이 저장됩니다.
80은 1보다 크고 이후 값이 없는데, 이 때 오른쪽에 위치한 80보다 작은 1은 의미가 없으므로 지워줍니다. 거리는 0 스택은 80/6이 됩니다.
60은 바로 뒤에 자신보다 큰 수인 80이 나오므로 거리는 1, 스택은 80/6 위에 각각 60/5가 오름차순으로 쌓입니다.
만약 36의 차례라면 30은 스텍에서 지워주고 보다 큰 수인 60의 idx 5에서 30의 idx 3를 뺀 2만큼의 거리가 결과로 나오고 스택은 36/3이 됩니다.
30은 지우고 60을 지우지 않는 이유는 비교할 필요가 있는 최소한의 값들만 비교군으로 남기기 위해서입니다.
36 왼쪽의 숫자는 36보다 작다면 거기서 끝날 것이고 36보다 더 크다한들 36뒤의 숫자가 36보다 작은 상황은 의미가 없기 때문입니다.
60은 뒤이어 작은 수들만 나오기 때문에 유의미하므로 70 이전까지 스택에서 삭제되지 않습니다.
"""

from typing import List

def distance_to_greater_num(nums: List[int]) -> List[int]:
    num_count = len(nums)
    results = [0]*num_count # 배열 갯수만큼 요소 우선 생성

    stack = []
    idx_stack = []

    for idx in range(num_count-1, -1, -1): # idx 7 ~ 0
        num = nums[idx]

        last_num_idx = 0
        while stack:
            last_num = stack[-1]
            last_num_idx = idx_stack[-1]
            # 기준 숫자보다 작은 숫자는 모두 스택에서 뽑아줌
            # 어차피 기준 숫자보다 작은 수들은 뒤이어 비교를 시작할 왼쪽 숫자에 영향이 없음
            # [39, 20, 70, 36, 30, 60, 80, 1]이 [39, 20, 70, 80]가 되어도 20은 70이 바로 큰 수이고
            # 20이 아니라 75였다 하더라도 스택에서 삭제시킨 중간 숫자는 영향이 없음
            if last_num <= num:
                stack.pop()
                idx_stack.pop()
            else:
                break

        if len(stack) == 0: # 맨 처음 가장 끝 숫자를 stack/idx_stack에 심어줌
            stack.append(num)
            idx_stack.append(idx)
            results[idx] = 0 # 끝 숫자는 비교군이 없기 때문에 당연히 0
            continue

        stack.append(num)
        idx_stack.append(idx)
        results[idx] = last_num_idx -idx # 

    return results

print(distance_to_greater_num(nums=[39, 20, 70, 36, 30, 60, 80, 1]))







# 힘내자